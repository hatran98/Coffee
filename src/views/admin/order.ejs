<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Quản lý đơn hàng</title>
  <link rel="stylesheet" href="/sidebar.css"> 
  <link rel="stylesheet" href="/orderpanel.css">
  <script src="/js/scripts.js" defer></script> 
</head>
<body>
  <div class="container">
    <!-- Sidebar -->
    <%- include('../sidebar') %> 

    <!-- Nội dung chính -->
    <div class="main-content">
      <h1>Quản lý Đơn Hàng</h1>

      <!-- Tìm kiếm và Sắp xếp -->
      <div class="filters">
        <!-- Tìm kiếm -->
        <input type="text" id="searchInput" placeholder="Tìm kiếm theo mã đơn hàng hoặc khách hàng" />

        <!-- Sắp xếp -->
        <select id="sortBy">
          <option value="created_at">Sắp xếp theo Ngày tạo</option>
          <option value="total_price">Sắp xếp theo Tổng tiền</option>
          <option value="payment_status">Sắp xếp theo Trạng thái thanh toán</option>
        </select>
        
        <button id="applyFilters">Áp dụng</button>
      </div>

      <!-- Bảng quản lý đơn hàng -->
      <div class="table-container">
        <table border="1" cellspacing="0" cellpadding="10">
          <thead>
            <tr>
              <th>Mã đơn</th>
              <th>Khách hàng</th>
              <th>Ngày tạo</th>
              <th>Tổng tiền</th>
              <th>Trạng thái</th>
              <th>Hành động</th>
            </tr>
          </thead>
          <tbody id="ordersTableBody">
            <% orders.forEach((order, index) => { %>
              <tr>
                <td><%= order._id %></td>
                <td><%= order.customer_name ? order.customer_name : 'N/A' %></td>
                <td>
                  <%= order.created_at ? new Date(order.created_at).toLocaleString("vi-VN", { timeZone: 'Asia/Ho_Chi_Minh', hour12: false }) : 'N/A' %>
                </td>              
                <td><%= order.total_price ? order.total_price : 'N/A' %></td>
                <td><%= order.payment_status === 'paid' ? 'Thanh toán' : 'Chưa Thanh Toán' %></td>
                <td>
                  <button class="view-order-btn" data-order-id="<%= order._id %>">Xem</button>
                </td>
              </tr>
            <% }); %>
          </tbody>
        </table>
      </div>
      <div id="pagination" class="pagination">
        <button id="prevPage" class="page-btn" disabled>Trang trước</button>
        <span id="pageNumber">Trang 1</span>
        <button id="nextPage" class="page-btn">Trang sau</button>
      </div>
    </div>
  </div>

  <!-- Modal hiển thị chi tiết đơn hàng -->
  <div id="orderModal" class="modal">
    <div class="modal-content">
      <span class="close-btn">&times;</span>
      <h2>Chi tiết đơn hàng</h2>
      <div id="orderDetails"></div>
    </div>
  </div>

  <script>
    const orders = <%- JSON.stringify(orders) %>;
    const ordersPerPage = 10; // Số lượng đơn hàng mỗi trang
    let currentPage = 1; // Trang hiện tại
  
    // Lọc và sắp xếp đơn hàng khi nhấn "Áp dụng"
    document.getElementById('applyFilters').addEventListener('click', function() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const sortBy = document.getElementById('sortBy').value;
  
      let filteredOrders = orders;
  
      // Lọc đơn hàng theo từ khóa tìm kiếm
      if (searchTerm) {
        filteredOrders = filteredOrders.filter(order => {
          return order._id.toLowerCase().includes(searchTerm) || 
                 order.customer_name.toLowerCase().includes(searchTerm);
        });
      }
  
      // Sắp xếp đơn hàng theo lựa chọn
      filteredOrders.sort((a, b) => {
        if (sortBy === 'created_at') {
          return new Date(a.created_at) - new Date(b.created_at);
        } else if (sortBy === 'total_price') {
          return a.total_price - b.total_price;
        } else if (sortBy === 'payment_status') {
          return a.payment_status.localeCompare(b.payment_status);
        }
        return 0;
      });
  
      // Cập nhật bảng với danh sách đã lọc và sắp xếp
      updateOrderTable(filteredOrders);
    });
  
    // Cập nhật bảng với đơn hàng theo trang
    function updateOrderTable(orders) {
      const tbody = document.getElementById('ordersTableBody');
      tbody.innerHTML = ''; // Xóa nội dung cũ
  
      // Lấy phân trang dữ liệu
      const startIndex = (currentPage - 1) * ordersPerPage;
      const endIndex = startIndex + ordersPerPage;
      const paginatedOrders = orders.slice(startIndex, endIndex);
  
      // Hiển thị các đơn hàng theo trang
      paginatedOrders.forEach((order, index) => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${order._id}</td>
          <td>${order.customer_name || 'N/A'}</td>
          <td>${order.created_at ? new Date(order.created_at).toLocaleString("vi-VN", { timeZone: 'Asia/Ho_Chi_Minh', hour12: false }) : 'N/A'}</td>
          <td>${order.total_price || 'N/A'}</td>
          <td>${order.payment_status == 'paid' ? 'Thanh toán' : 'Chưa Thanh Toán'}</td>
          <td>
            <button class="view-order-btn" data-order-id="${order._id}">Xem</button>
          </td>
        `;
        tbody.appendChild(row);
      });
  
      // Cập nhật phân trang
      updatePagination(orders.length);
  
      // Gán sự kiện cho các nút "Xem" mới được tạo ra
      attachViewOrderEvents();
    }
  
    // Cập nhật phân trang
    function updatePagination(totalOrders) {
      const totalPages = Math.ceil(totalOrders / ordersPerPage);
      const pageNumberSpan = document.getElementById('pageNumber');
      const prevPageBtn = document.getElementById('prevPage');
      const nextPageBtn = document.getElementById('nextPage');
  
      // Cập nhật số trang và các nút phân trang
      pageNumberSpan.textContent = `Trang ${currentPage}`;
      prevPageBtn.disabled = currentPage === 1;
      nextPageBtn.disabled = currentPage === totalPages;
  
      // Xử lý sự kiện chuyển trang
      prevPageBtn.onclick = function() {
        if (currentPage > 1) {
          currentPage--;
          updateOrderTable(orders); // Cập nhật bảng khi chuyển trang
        }
      };
      nextPageBtn.onclick = function() {
        if (currentPage < totalPages) {
          currentPage++;
          updateOrderTable(orders); // Cập nhật bảng khi chuyển trang
        }
      };
    }
  
    // Gán sự kiện "Xem" cho các nút "Xem"
    function attachViewOrderEvents() {
      document.querySelectorAll('.view-order-btn').forEach(button => {
        button.addEventListener('click', async function() {
          const orderId = this.getAttribute('data-order-id');
  
          // Gửi yêu cầu Ajax để lấy chi tiết đơn hàng
          try {
  const response = await fetch(`/admin/order/${orderId}`);
  const orderData = await response.json();

  // Hiển thị chi tiết đơn hàng trong modal
  const orderDetails = document.getElementById('orderDetails');
  const vnTime = new Date(orderData.created_at).toLocaleString("vi-VN", { timeZone: 'Asia/Ho_Chi_Minh', hour12: false });
  
  let orderHtml = `
    <h3>Thông tin đơn hàng ${orderData._id}</h3>
    <p><strong>Ngày tạo: ${vnTime}</strong></p>
    <p><strong>Tên khách hàng: ${orderData.customer_name}</strong></p>
    <p><strong>Tổng tiền: ${orderData.total_price}</strong></p>
  `;
  // Kiểm tra nếu có sản phẩm trong đơn hàng
  if (orderData.products && orderData.products.length > 0) {
    orderHtml += `<h3>Danh sách sản phẩm:</h3><ul>`;
    orderData.products.forEach(product => {
      orderHtml += `
        <li>
          <p><strong>Mã sản phẩm:</strong> ${product.product_code}</p>
          <p><strong>Tên sản phẩm:</strong> ${product.product_name}</p>
          <p><strong>Miêu tả:</strong> ${product.product_description}</p>
          <p><strong>Loại sản phẩm:</strong> ${product.product_type}</p>
          <p><strong>Phương pháp pha chế:</strong> ${product.brew_type}</p>
          <p><strong>Cân nặng:</strong> ${product.weight}</p>
          <p><strong>Cấp độ rang:</strong> ${product.roast_level}</p>
          <p><strong>Số lượng:</strong> ${product.quantity}</p>
          <p><strong>Giá:</strong> ${product.price}</p>
        </li>
      `;
    });
    orderHtml += `</ul>`;
  } else {
    orderHtml += `<p>Không có sản phẩm trong đơn hàng này.</p>`;
  }

  // Cập nhật nội dung chi tiết đơn hàng trong modal
  orderDetails.innerHTML = orderHtml;

  // Hiển thị modal
  document.getElementById('orderModal').style.display = 'block';
} catch (error) {
  alert('Không thể tải chi tiết đơn hàng.');
}

        });
      });
    }
  
    // Đóng modal
    document.querySelector('.close-btn').addEventListener('click', function() {
      document.getElementById('orderModal').style.display = 'none';
    });
  
    // Hiển thị đơn hàng lần đầu
    updateOrderTable(orders);
  </script>
  
</body>
</html>
